<!DOCTYPE html>
<html>
<head>
  <title>ajlane.id.au</title>
  <link rel="openid2.provider" href="https://www.google.com/accounts/o8/ud?source=profiles" />
  <link rel="openid2.local_id" href="https://plus.google.com/113427245716758655175"/>
  <style>
    body {
      background-color: white;
      background-repeat: no-repeat;
      background-position: bottom center;
      background-size: cover;
      background-attachment: fixed;
    }
    h1 {
      font-family:sans-serif;
      color:white;
      text-align: right;
      position: fixed;
      bottom: 5%;
      right: 10%;
    }
    #canvas {
      position:fixed;
      top:0;
      left:0;
      right:0;
      bottom:0;
      z-index:-1;
    }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.8/d3.min.js"></script>
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-25124081-2', 'auto');
    ga('send', 'pageview');
  </script>
</head>
<body>
  <h1><img src="logo.png" alt="ajlane.id.au"/></h1>
  <script>
    var randomImage = function(hue){
      var width = 30;
      var height = 30;
      var num = width * height;
      var points = [];
      for(var y = 0; y < height; y++){
        for(var x = 0; x< width; x++){
          var i = num - (height * y + x);
          var h = hue + 120 * ((Math.round(Math.random()*4-2) + x)/width + (Math.round(Math.random()*4-2) + y)/height) / 2;
          if(h>360)h-=360;
          var c = 80;
          var l = 80 - 60 * ((Math.round(Math.random()*4-2) + x)/width + (Math.round(Math.random()*4-2) + y)/height) / 2 + 20 * (i/num);
          var colour = d3.hcl(h,c,l);
          points.push([x/width + (Math.random() * 0.1 - 0.05),y/height + (Math.random() * 0.1 - 0.05), colour]);
        }
      }
      return points;
    };
    var image = function(url){
      var img = document.createElement('img');
      img.src = url;

      var samplesX = 120, samplesY = 120;

      var context = document.createElement('canvas').getContext("2d");
      context.drawImage(img, 0, 0, samplesX, samplesY);
      var pixels = context.getImageData(0,0,samplesX,samplesY).data;

      var points = [];
      for(var y = 0; y < samplesY; y++){
        for(var x = 0; x< samplesX; x++){
          var p = 4 * samplesY * y + 4 * x;
          var colour = Array.prototype.slice.call(pixels, p, p+3);
          points.push([
            x/samplesX + (Math.random() * 0.1 - 0.05),
            y/samplesY + (Math.random() * 0.1 - 0.05),
            d3.rgb.apply(d3.rgb,colour)
          ]);
        }
      }

      var filtered = [];

      var quadtree = d3.geom.quadtree()(points);
      function postOrder(parent, action){
        if(!parent.iseaf){
          for(var i = 0; i < 4; i++){
            var child = parent.nodes[i];
            if(child) postOrder(child, action);
          }
        }
        if(action) action(parent);
      }
      postOrder(quadtree, function(node){
        if(!node.leaf){
          node.minHue = 360;
          node.maxHue = 0;
          node.minSat = 1;
          node.maxSat = 0;
          node.minLight = 1;
          node.maxLight = 0;
          node.points = [];
          for(var i = 0; i < 4; i++){
            var child = node.nodes[i];
            if(child){
              if(child.minHue < node.minHue) node.minHue = child.minHue;
              if(child.maxHue > node.maxHue) node.maxHue = child.maxHue;
              if(child.minSat < node.minSat) node.minSat = child.minSat;
              if(child.maxSat > node.maxSat) node.maxSat = child.maxSat;
              if(child.minLight < node.minLight) node.minLight = child.minLight;
              if(child.maxLight > node.maxLight) node.maxLight = child.maxLight;
              node.points.push(child.point);
            }
          }
          node.hueRange = Math.max(0, node.maxHue - node.minHue);
          node.satRange = Math.max(0, node.maxSat - node.minSat);
          node.lightRange = Math.max(0, node.maxLight - node.minLight);
          node.point = [
            node.points.reduce(function(a,b){ return a + b[0]}, 0) / node.points.length,
            node.points.reduce(function(a,b){ return a + b[1]}, 0) / node.points.length,
            node.points[0][2]
          ];
          node.points = null;
        } else {
          var hue = node.point[2].hsl().h;
          var sat = node.point[2].hsl().s;
          var light = node.point[2].hsl().l;
          node.minHue = hue;
          node.maxHue = hue;
          node.minSat = sat;
          node.maxSat = sat;
          node.minLight = light;
          node.maxLight = light;
          node.hueRange = 0;
          node.satRange = 0;
          node.lightRange = 0;
        }
      });
      quadtree.visit(function(node){
        if(node.hueRange < 120 && node.satRange < 0.5 && node.lightRange < 0.5){
          filtered.push(node.point);
          return true;
        }
        return false;
      });

      return filtered;
    };
    var background = function(points){
      if(!points || !points.length) return;
      var voronoi = d3.geom.voronoi()
        .clipExtent([[0,0],[1,1]])
        (points);
      var delay = function(){
        var scale = d3.scale.linear()
        .domain([0, 1])
        .range([0, 5000])
        return function(p,i){ return p ? scale(0.8 - 0.6 * (p[0] + p[1]) / 2 - 0.2 * (i/points.length)) : 0; }
      }();
      var colour = function(p,i){
        return p[2];
      };
      
      var svgSupported = document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1");
      if(svgSupported)
      {
        var canvas = d3.select('#canvas')
          .data(['canvas']);
        canvas
          .enter()
          .append('svg')
          .attr('id', 'canvas')
          .attr('viewBox', '0 0 1 1')
          .attr('preserveAspectRatio', 'xMidYMid slice');
        var cells = canvas
          .selectAll('path')
          .data(points);
        cells.enter()
          .append('path')
          .attr('stroke-width', '0.001')
          .attr('fill', 'white')
          .attr('stroke', 'white');      
        cells.transition()
          .delay(delay)
          .duration(700)
          .attr('fill', colour)
          .attr('stroke', colour)
          .attr('d', function(d, i){
            var outline = voronoi[i];
            return "M" + (outline.length ? outline.join("L") : d[0] + "," + d[1]) + "Z";
          });
        cells.exit()
          .transition()
          .delay(delay)
          .duration(700)
          .attr('fill', 'transparent')
          .attr('stroke', 'transparent')
          .remove();
        var title = d3.select('h1')
          .data(['title'])
          .style('opacity', '0');
        title.transition()
          .duration(1500)
          .style('opacity', '1');
      } else {
        // Fallback to canvas
        var width = Math.max(screen.width, window.outerWidth);
        var height = Math.max(screen.height, window.outerHeight);
        var canvas = d3.select('body')
          .append('canvas')
          .attr('id', 'canvas')
          .attr('width', width)
          .attr('height', height);
        var x = function(r){ return r * width; };
        var y = function(r){ return r * height; };
        var context = canvas.node().getContext('2d');
        context.clearRect(0,0,width,height);
        points.forEach(function(p, i){
          var vertices = voronoi[i];
          if(vertices.length){
            context.beginPath();
            context.fillStyle = colour(p,i).toString();
            context.strokeStyle = colour(p,i).toString();
            context.lineWidth = 2;
            context.moveTo(x(vertices[0][0]), y(vertices[0][1]));
            for(var i = 1; i < vertices.length; i++){
              context.lineTo(x(vertices[i][0]), y(vertices[i][1]));
            }
            context.closePath();
            context.fill();
            context.stroke();
          }
        });
      }
    };
    background(randomImage(Math.random() * 360));
    var randomChange = window.setInterval(function(){
      background(randomImage(Math.random() * 360));
    }, 10000)
    document.ondragover = function(e){
      e.dataTransfer.dropEffect = 'copy';
      return false;
    };
    document.ondrop = function(e){
      e.preventDefault();
      window.clearInterval(randomChange);
      var files = e.dataTransfer.files;
      for(var i = 0; i < files.length; i++){
        if(files[i].type.match(/image.*/)){
          var reader = new FileReader();
          reader.onloadend = function(){        
            background(image(this.result));
          };
          reader.readAsDataURL(files[i]);
          break;
        }
      }
    };
    
    
  </script>
</body>
</html>
